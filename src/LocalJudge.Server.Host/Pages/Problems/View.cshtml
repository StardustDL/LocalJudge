@page
@model LocalJudge.Server.Host.Pages.Problems.ViewModel
@{
    ViewData["Title"] = "View";
}

@section header{
    <link rel="stylesheet" data-name="vs/editor/editor.main" href="~/lib/monaco-editor/min/vs/editor/editor.main.css">
}

<h1>@Html.DisplayFor(model => model.Metadata.Name)</h1>

<div class="row">
    <div class="col-9">
        <h2>Description</h2>

        <p>@Html.Raw(Markdig.Markdown.ToHtml(Model.Description.Description))</p>

        <br />

        <h2>Input</h2>

        <p>@Html.Raw(Markdig.Markdown.ToHtml(Model.Description.Input))</p>

        <br />

        <h2>Output</h2>

        <p>@Html.Raw(Markdig.Markdown.ToHtml(Model.Description.Output))</p>

        <br />

        <h2>Samples</h2>

        @for (int i = 0; i < Model.SampleData.Count; i++)
        {
            var item = Model.SampleData[i];
            <h3>Sample @i</h3>
            <div class="row">
                <div class="col">
                    <h4>Input</h4>
                    <pre>@Html.DisplayFor(model => item.Input)</pre>
                </div>
                <div class="col">
                    <h4>Output</h4>
                    <pre>@Html.DisplayFor(model => item.Output)</pre>
                </div>
            </div>
            <br />
        }

        <h2>Hint</h2>

        @Html.Raw(Markdig.Markdown.ToHtml(Model.Description.Hint))

        <br />
    </div>
    <div class="col-3">
        <h2>Information</h2>
        <dl>
            <dt>@Html.DisplayNameFor(model => model.Metadata.Author)</dt>
            <dd>@Html.DisplayFor(model => model.Metadata.Author)</dd>
            <dt>@Html.DisplayNameFor(model => model.Metadata.Source)</dt>
            <dd>@Html.DisplayFor(model => model.Metadata.Source)</dd>
        </dl>
        <br />
        <h2>Sample Cases</h2>
        <table class="table table-sm table-bordered">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.Samples[0].Id)
                    </th>
                    <th style="width:10%">
                        @Html.DisplayNameFor(model => model.Samples[0].TimeLimit)
                    </th>
                    <th style="width:10%">
                        @Html.DisplayNameFor(model => model.Samples[0].MemoryLimit)
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Samples)
                {
                    <tr>
                        <td>
                            @item.Id
                        </td>
                        <td>
                            @item.TimeLimit.TotalSeconds s
                        </td>
                        <td>
                            @(item.MemoryLimit / 1024 / 1024) MB
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <br />
        <h2>Test Cases</h2>
        <table class="table table-sm table-bordered">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.Tests[0].Id)
                    </th>
                    <th style="width:10%">
                        @Html.DisplayNameFor(model => model.Tests[0].TimeLimit)
                    </th>
                    <th style="width:10%">
                        @Html.DisplayNameFor(model => model.Tests[0].MemoryLimit)
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Tests)
                {
                    <tr>
                        <td>
                            @item.Id
                        </td>
                        <td>
                            @item.TimeLimit.TotalSeconds s
                        </td>
                        <td>
                            @(item.MemoryLimit / 1024 / 1024) MB
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<h2>Code</h2>

<br />

<div id="codeEditor" class="row" style="min-height:500px">

</div>

@if (!string.IsNullOrEmpty(Model.SubmissionID))
{
    <p>Submitted: @Model.SubmissionID .</p>
}

<form method="post">
    <textarea asp-for="SubmitData.ProblemID"></textarea>
    <textarea asp-for="SubmitData.Language"></textarea>
    <textarea asp-for="SubmitData.Code" id="formCode"></textarea>
    <input type="submit" value="Save" class="btn btn-primary" />
</form>

@section scripts{
    <script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/latest.js?config=TeX-MML-AM_CHTML' async></script>
    <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
        tex2jax: {
        inlineMath: [ ['$','$'], ["\\(","\\)"] ],
        displayMath: [ ['$$','$$'], ["\\[","\\]"] ]
        }
        });
    </script>
    <script>var require = { paths: { 'vs': '../lib/monaco-editor/min/vs' } }</script>
    <script src="../lib/monaco-editor/min/vs/loader.js"></script>
    <script src="../lib/monaco-editor/min/vs/editor/editor.main.nls.js"></script>
    <script src="../lib/monaco-editor/min/vs/editor/editor.main.js"></script>
    <script>
        var editor = monaco.editor.create(document.getElementById('codeEditor'), {
            value: [
                '#include <iostream>',
                'int main() {',
                '\t',
                '}'
            ].join('\n'),
            language: 'cpp'
        });
        editor.onDidChangeModelContent((e) => {
            document.getElementById('formCode').value = editor.getValue();
        });
    </script>
}